import{S as c}from"./DqFXw4dc.js";class a{constructor(t){Object.getOwnPropertyNames(t).forEach(e=>{Object.defineProperty(this,e,Object.getOwnPropertyDescriptor(t,e))}),this.unlocked=!this.reqs,this.notified=!1,this.assign&&(this.assign.count=0)}load(t){t.assignCount&&(this.assign.count=t.assignCount),t.count&&(this.count=t.count),t.notified&&(this.notified=t.notified),t.remainingSeconds&&(this.remainingSeconds=t.remainingSeconds),t.status&&(this.status=t.status)}getDataToSave(){let t={};return this.assign&&(t.assignCount=this.assign.count),this.notified&&(t.notified=this.notified),this.remainingSeconds&&(t.remainingSeconds=this.remainingSeconds),this.status&&(t.status=this.status),this.count&&(t.count=this.count),this.id&&(t.id=this.id),t}}const h=c({id:"game-store",state:()=>({elems:[],victory:!1,victoryReqs:null}),getters:{getElem:i=>t=>i.elems.find(o=>o.id==t),isVictoryReached:i=>i.victory?!1:!!(i.victoryReqs&&i.checkCounts(i.victoryReqs)),getCosts:i=>t=>t.costs,getInputs:i=>t=>t.inputs,getOutputs:i=>t=>t.outputs,getResults:i=>t=>t.results,getUpgrades:i=>t=>t.upgrades,getStorages:i=>t=>t.storages,checkCounts:i=>t=>{let o=!0;for(let e in t)i.getElem(e).count<t[e]&&(o=!1);return o},checkProds:i=>t=>{let o=!0;for(let e in t)i.getElem(e).prod<t[e]&&(o=!1);return o},checkResults:i=>t=>{let o=!0;for(let e in t){let s=i.getElem(e);s.count+t[e]>s.max&&(o=!1)}return o},getAvailableCount:i=>t=>{let e=i.getElem(t).count;return i.elems.filter(n=>n.assign&&n.assign.id==t&&n.assign.count>0).forEach(n=>e-=n.assign.count),e},checkAvailables:i=>t=>{let o=!0;for(let e in t)i.getAvailableCount(e)<t[e]&&(o=!1);return o}},actions:{loadScenario(i){this.elems=[],this.victory=!1,this.victoryReqs=i.victoryReqs,i.elems.forEach(e=>{let s=new a(e);this.elems.push(s)}),this.elems.filter(e=>e.type=="building").forEach(e=>{this.elems.filter(n=>n.assign&&n.assign.id==e.id).forEach(n=>{n.reqs=e.reqs,n.unlocked=!1})})},loadGameState(i){i.elems!=null&&i.elems.forEach(s=>{let n=this.getElem(s.id);n&&n.load(s)}),this.elems.filter(s=>s.reqs).forEach(s=>{s.unlocked=this.checkCounts(s.reqs)}),this.elems.filter(s=>s.type=="building"&&s.count>0).forEach(s=>{this.elems.filter(r=>r.type=="manual"&&r.results[s.id]&&r.inputs).forEach(r=>{for(let u in r.inputs){let l=this.getElem(u);l.prod-=r.inputs[u]*s.count,l.prod=Math.round(l.prod*100)/100}})}),this.elems.filter(s=>s.assign&&s.assign.count>0).forEach(s=>{if(s.inputs)for(let n in s.inputs){let r=this.getElem(n);r.prod-=s.inputs[n]*s.assign.count,r.prod=Math.round(r.prod*100)/100}if(s.outputs)for(let n in s.outputs){let r=this.getElem(n);r.prod+=s.outputs[n]*s.assign.count,r.prod=Math.round(r.prod*100)/100}if(s.storages)for(let n in s.storages){let r=this.getElem(n);r.max+=s.storages[n]*s.assign.count,r.max=Math.round(r.max*100)/100}}),this.victory=this.checkCounts(this.victoryReqs)},computeOfflineProgress(i){this.doTick(i)},saveGameState(i){i.elems=[],this.elems.forEach(t=>i.elems.push(t.getDataToSave())),i.victory=this.victory},doTick(i){this.elems.filter(e=>e.status==="started").forEach(e=>{e.remainingSeconds-=i,e.remainingSeconds<=0&&this.onBuild(e)}),this.elems.filter(e=>e.prod>0&&e.count<e.max).forEach(e=>{e.count+=e.prod*i,e.count>=e.max&&(e.count=e.max)})},doVictory(){this.victory=!0},onBuild(i){i.status&&(i.status="waiting",i.remainingSeconds=0);let t=this.getResults(i);if(t)for(let e in t){let s=this.getElem(e);if(s.count>=s.max)continue;let n=t[e];s.count+=n,s.count>=s.max&&(s.count=s.max),s.count=Math.round(s.count*100)/100}this.elems.filter(e=>e.reqs).forEach(e=>{let s=this.checkCounts(e.reqs);s!=e.unlocked&&(e.unlocked=s,e.notified=!0)})}}});export{h as u};
